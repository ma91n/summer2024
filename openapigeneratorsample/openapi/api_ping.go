// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * openapi 3.0 auth code generator sample
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package openapi

import (
	"net/http"
	"strings"
)

// PingAPIController binds http requests to an api service and writes the service results to the http response
type PingAPIController struct {
	service      PingAPIServicer
	errorHandler ErrorHandler
}

// PingAPIOption for how the controller is set up.
type PingAPIOption func(*PingAPIController)

// WithPingAPIErrorHandler inject ErrorHandler into controller
func WithPingAPIErrorHandler(h ErrorHandler) PingAPIOption {
	return func(c *PingAPIController) {
		c.errorHandler = h
	}
}

// NewPingAPIController creates a default api controller
func NewPingAPIController(s PingAPIServicer, opts ...PingAPIOption) *PingAPIController {
	controller := &PingAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PingAPIController
func (c *PingAPIController) Routes() Routes {
	return Routes{
		"Hello": Route{
			strings.ToUpper("Get"),
			"/hello",
			c.Hello,
		},
		"HelloBearer": Route{
			strings.ToUpper("Get"),
			"/hello-bearer",
			c.HelloBearer,
		},
		"HelloOAuth2": Route{
			strings.ToUpper("Get"),
			"/hello-oauth2",
			c.HelloOAuth2,
		},
		"HelloOIDC": Route{
			strings.ToUpper("Get"),
			"/hello-oidc",
			c.HelloOIDC,
		},
	}
}

// Hello - helloðŸ‘‹
func (c *PingAPIController) Hello(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Hello(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// HelloBearer - hello bearerðŸ‘‹
func (c *PingAPIController) HelloBearer(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HelloBearer(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// HelloOAuth2 - hello oauth2ðŸ‘‹
func (c *PingAPIController) HelloOAuth2(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HelloOAuth2(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// HelloOIDC - hello openid connectðŸ‘‹
func (c *PingAPIController) HelloOIDC(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HelloOIDC(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
